"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[891],{9013:function(e,n,r){var t=r(7462),o=r(7294),c=r(859),a=r(9583),i=r(148),s=(0,i.fK)({name:"",children:[{name:"src",children:[{name:"index.js"},{name:"styles.css"}]},{name:"node_modules",children:[{name:"react-accessible-treeview",children:[{name:"index.js"}]},{name:"react",children:[{name:"index.js"}]}]},{name:".npmignore"},{name:"package.json"},{name:"webpack.config.js"}]});var l=function(e){return e.isOpen?o.createElement(a.zuo,{color:"e8a87c",className:"icon"}):o.createElement(a.IEK,{color:"e8a87c",className:"icon"})},d=function(e){var n=e.filename;switch(n.slice(n.lastIndexOf(".")+1)){case"js":return o.createElement(c.Fi5,{color:"yellow",className:"icon"});case"css":return o.createElement(c.BA4,{color:"turquoise",className:"icon"});case"json":return o.createElement(a.AeW,{color:"yellow",className:"icon"});case"npmignore":return o.createElement(c.I_N,{color:"red",className:"icon"});default:return null}};n.Z=function(){return o.createElement("div",null,o.createElement("div",{className:"directory"},o.createElement(i.ZP,{data:s,"aria-label":"directory tree",nodeRenderer:function(e){var n=e.element,r=e.isBranch,c=e.isExpanded,a=e.getNodeProps,i=e.level;return o.createElement("div",(0,t.Z)({},a(),{style:{paddingLeft:20*(i-1)}}),r?o.createElement(l,{isOpen:c}):o.createElement(d,{filename:n.name}),n.name)}})))}},7745:function(e,n,r){r.r(n),r.d(n,{assets:function(){return f},contentTitle:function(){return p},default:function(){return x},frontMatter:function(){return m},metadata:function(){return u},toc:function(){return y}});var t=r(7462),o=r(3366),c=(r(7294),r(3905)),a=r(2805),i=r(9013),s='import React from "react";\nimport { DiCss3, DiJavascript, DiNpm } from "react-icons/di";\nimport { FaList, FaRegFolder, FaRegFolderOpen } from "react-icons/fa";\nimport TreeView, { flattenTree } from "react-accessible-treeview";\nimport "./styles.css";\n\nconst folder = {\n  name: "",\n  children: [\n    {\n      name: "src",\n      children: [{ name: "index.js" }, { name: "styles.css" }],\n    },\n    {\n      name: "node_modules",\n      children: [\n        {\n          name: "react-accessible-treeview",\n          children: [{ name: "index.js" }],\n        },\n        { name: "react", children: [{ name: "index.js" }] },\n      ],\n    },\n    {\n      name: ".npmignore",\n    },\n    {\n      name: "package.json",\n    },\n    {\n      name: "webpack.config.js",\n    },\n  ],\n};\n\nconst data = flattenTree(folder);\n\nfunction DirectoryTreeView() {\n  return (\n    <div>\n      <div className="directory">\n        <TreeView\n          data={data}\n          aria-label="directory tree"\n          nodeRenderer={({\n            element,\n            isBranch,\n            isExpanded,\n            getNodeProps,\n            level,\n          }) => (\n            <div {...getNodeProps()} style={{ paddingLeft: 20 * (level - 1) }}>\n              {isBranch ? (\n                <FolderIcon isOpen={isExpanded} />\n              ) : (\n                <FileIcon filename={element.name} />\n              )}\n\n              {element.name}\n            </div>\n          )}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst FolderIcon = ({ isOpen }) =>\n  isOpen ? (\n    <FaRegFolderOpen color="e8a87c" className="icon" />\n  ) : (\n    <FaRegFolder color="e8a87c" className="icon" />\n  );\n\nconst FileIcon = ({ filename }) => {\n  const extension = filename.slice(filename.lastIndexOf(".") + 1);\n  switch (extension) {\n    case "js":\n      return <DiJavascript color="yellow" className="icon" />;\n    case "css":\n      return <DiCss3 color="turquoise" className="icon" />;\n    case "json":\n      return <FaList color="yellow" className="icon" />;\n    case "npmignore":\n      return <DiNpm color="red" className="icon" />;\n    default:\n      return null;\n  }\n};\n\nexport default DirectoryTreeView;\n',l=".directory {\n  background: #242322;\n  font-family: monospace;\n  font-size: 16px;\n  color: white;\n  user-select: none;\n  padding: 20px;\n  border-radius: 0.4em;\n}\n\n.directory .tree,\n.directory .tree-node,\n.directory .tree-node-group {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.directory .tree-branch-wrapper,\n.directory .tree-node__leaf {\n  outline: none;\n  outline: none;\n}\n\n.directory .tree-node {\n  cursor: pointer;\n}\n\n.directory .tree-node:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n.directory .tree .tree-node--focused {\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.directory .tree .tree-node--selected {\n  background: rgba(48, 107, 176);\n}\n\n.directory .tree-node__branch {\n  display: block;\n}\n\n.directory .icon {\n  vertical-align: middle;\n  padding-right: 5px;\n}\n",d=["components"],m={title:"Directory tree (single selection)"},p=void 0,u={unversionedId:"examples-DirectoryTree",id:"examples-DirectoryTree",title:"Directory tree (single selection)",description:"An example of how to customize the styling of the component",source:"@site/docs/examples-DirectoryTree.md",sourceDirName:".",slug:"/examples-DirectoryTree",permalink:"/react-accessible-treeview/docs/examples-DirectoryTree",draft:!1,tags:[],version:"current",frontMatter:{title:"Directory tree (single selection)"},sidebar:"docs",previous:{title:"Basic with controlled expandable node",permalink:"/react-accessible-treeview/docs/examples-ControlledExpandedNode"},next:{title:"Directory tree (multiple selection)",permalink:"/react-accessible-treeview/docs/examples-MultiSelectDirectoryTree"}},f={},y=[],g={toc:y},v="wrapper";function x(e){var n=e.components,r=(0,o.Z)(e,d);return(0,c.kt)(v,(0,t.Z)({},g,r,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"An example of how to customize the styling of the component"),(0,c.kt)(a.Z,{component:i.Z,js:s,css:l,mdxType:"CodeTabs"}))}x.isMDXComponent=!0}}]);