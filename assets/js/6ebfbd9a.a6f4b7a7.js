"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[864],{6532:function(e,n,a){a.r(n),a.d(n,{assets:function(){return E},contentTitle:function(){return S},default:function(){return B},frontMatter:function(){return v},metadata:function(){return w},toc:function(){return D}});var t=a(7462),r=a(3366),c=a(7294),s=a(3905),o=a(2805),l=a(9583),i=a(1649),d=a(4184),m=a.n(d),u=a(148),p=["variant"],b=(0,u.fK)({name:"",children:[{name:"Fruits",children:[{name:"Avocados"},{name:"Bananas"},{name:"Berries"},{name:"Oranges"},{name:"Pears"}]},{name:"Drinks",children:[{name:"Apple Juice"},{name:"Chocolate"},{name:"Coffee"},{name:"Tea",children:[{name:"Black Tea"},{name:"Green Tea"},{name:"Red Tea"},{name:"Matcha"}]}]},{name:"Vegetables",children:[{name:"Beets"},{name:"Carrots"},{name:"Celery"},{name:"Lettuce"},{name:"Onions"}]}]});var h=function(e){var n,a,t=e.isOpen,r=e.className,s="arrow",o=m()(s,((n={})[s+"--closed"]=!t,n),((a={})[s+"--open"]=t,a),r);return c.createElement(i.am,{className:o})},x=function(e){var n=e.variant,a=(0,r.Z)(e,p);switch(n){case"all":return c.createElement(l.xik,a);case"none":return c.createElement(l.u9M,a);case"some":return c.createElement(l.kty,a);default:return null}},k=function(){return c.createElement("div",null,c.createElement("div",{className:"checkbox"},c.createElement(u.ZP,{data:b,"aria-label":"Checkbox tree",multiSelect:!0,propagateSelect:!0,propagateSelectUpwards:!0,defaultDisabledIds:[1,5],togglableSelect:!0,nodeRenderer:function(e){var n=e.element,a=e.isBranch,r=e.isExpanded,s=e.isSelected,o=e.isDisabled,l=e.isHalfSelected,i=e.getNodeProps,d=e.level,m=e.handleSelect,u=e.handleExpand,p=e.dispatch;return c.createElement(c.Fragment,null,c.createElement("div",(0,t.Z)({},i({onClick:u}),{style:{marginLeft:40*(d-1),opacity:o?.5:1}}),a&&c.createElement(h,{isOpen:r}),c.createElement(x,{className:"checkbox-icon",onClick:function(e){m(e),e.stopPropagation()},variant:l?"some":s?"all":"none"}),c.createElement("span",{className:"name"},n.name)),c.createElement("button",{onClick:function(){return p({type:o?"ENABLE":"DISABLE",id:n.id})}},o?"Enable":"Disable"))}})))},f='import React from "react";\nimport { FaSquare, FaCheckSquare, FaMinusSquare } from "react-icons/fa";\nimport { IoMdArrowDropright } from "react-icons/io";\nimport cx from "classnames";\n\nimport TreeView, { flattenTree } from "react-accessible-treeview";\nconst folder = {\n  name: "",\n  children: [\n    {\n      name: "Fruits",\n      children: [\n        { name: "Avocados" },\n        { name: "Bananas" },\n        { name: "Berries" },\n        { name: "Oranges" },\n        { name: "Pears" },\n      ],\n    },\n    {\n      name: "Drinks",\n      children: [\n        { name: "Apple Juice" },\n        { name: "Chocolate" },\n        { name: "Coffee" },\n        {\n          name: "Tea",\n          children: [\n            { name: "Black Tea" },\n            { name: "Green Tea" },\n            { name: "Red Tea" },\n            { name: "Matcha" },\n          ],\n        },\n      ],\n    },\n    {\n      name: "Vegetables",\n      children: [\n        { name: "Beets" },\n        { name: "Carrots" },\n        { name: "Celery" },\n        { name: "Lettuce" },\n        { name: "Onions" },\n      ],\n    },\n  ],\n};\n\nconst data = flattenTree(folder);\n\nfunction MultiSelectCheckboxDisabled() {\n  return (\n    <div>\n      <div className="checkbox">\n        <TreeView\n          data={data}\n          aria-label="Checkbox tree"\n          multiSelect\n          propagateSelect\n          propagateSelectUpwards\n          defaultDisabledIds={[1, 5]}\n          togglableSelect\n          nodeRenderer={({\n            element,\n            isBranch,\n            isExpanded,\n            isSelected,\n            isDisabled,\n            isHalfSelected,\n            getNodeProps,\n            level,\n            handleSelect,\n            handleExpand,\n            dispatch,\n          }) => {\n            return (\n              <>\n                <div\n                  {...getNodeProps({ onClick: handleExpand })}\n                  style={{\n                    marginLeft: 40 * (level - 1),\n                    opacity: isDisabled ? 0.5 : 1,\n                  }}\n                >\n                  {isBranch && <ArrowIcon isOpen={isExpanded} />}\n                  <CheckBoxIcon\n                    className="checkbox-icon"\n                    onClick={(e) => {\n                      handleSelect(e);\n                      e.stopPropagation();\n                    }}\n                    variant={\n                      isHalfSelected ? "some" : isSelected ? "all" : "none"\n                    }\n                  />\n                  <span className="name">{element.name}</span>\n                </div>\n                <button\n                  onClick={() =>\n                    dispatch({\n                      type: isDisabled ? "ENABLE" : "DISABLE",\n                      id: element.id,\n                    })\n                  }\n                >\n                  {isDisabled ? "Enable" : "Disable"}\n                </button>\n              </>\n            );\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst ArrowIcon = ({ isOpen, className }) => {\n  const baseClass = "arrow";\n  const classes = cx(\n    baseClass,\n    { [`${baseClass}--closed`]: !isOpen },\n    { [`${baseClass}--open`]: isOpen },\n    className\n  );\n  return <IoMdArrowDropright className={classes} />;\n};\n\nconst CheckBoxIcon = ({ variant, ...rest }) => {\n  switch (variant) {\n    case "all":\n      return <FaCheckSquare {...rest} />;\n    case "none":\n      return <FaSquare {...rest} />;\n    case "some":\n      return <FaMinusSquare {...rest} />;\n    default:\n      return null;\n  }\n};\n\nexport default MultiSelectCheckboxDisabled;\n',g=a(1240),C=["components"],v={title:"Checkbox with disabled nodes"},S=void 0,w={unversionedId:"examples-MultiSelectCheckboxDisabled",id:"examples-MultiSelectCheckboxDisabled",title:"Checkbox with disabled nodes",description:"This example demonstrates the use of disabled nodes",source:"@site/docs/examples-MultiSelectCheckboxDisabled.md",sourceDirName:".",slug:"/examples-MultiSelectCheckboxDisabled",permalink:"/react-accessible-treeview/docs/examples-MultiSelectCheckboxDisabled",draft:!1,tags:[],version:"current",frontMatter:{title:"Checkbox with disabled nodes"},sidebar:"docs",previous:{title:"Checkbox",permalink:"/react-accessible-treeview/docs/examples-MultiSelectCheckbox"},next:{title:"Asynchronous loading",permalink:"/react-accessible-treeview/docs/examples-MultiSelectCheckboxAsync"}},E={},D=[],M={toc:D},T="wrapper";function B(e){var n=e.components,a=(0,r.Z)(e,C);return(0,s.kt)(T,(0,t.Z)({},M,a,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This example demonstrates the use of disabled nodes"),(0,s.kt)(o.Z,{component:k,js:f,css:g.Z,mdxType:"CodeTabs"}))}B.isMDXComponent=!0},1240:function(e,n){n.Z=".checkbox {\n  font-size: 16px;\n  user-select: none;\n  min-height: 320px;\n  padding: 20px;\n  box-sizing: content-box;\n}\n\n.checkbox .tree,\n.checkbox .tree-node,\n.checkbox .tree-node-group {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.checkbox .tree-branch-wrapper,\n.checkbox .tree-node__leaf {\n  outline: none;\n}\n\n.checkbox .tree-node {\n  cursor: pointer;\n}\n\n.checkbox .tree-node .name:hover {\n  background: rgba(0, 0, 0, 0.1);\n}\n\n.checkbox .tree-node--focused .name {\n  background: rgba(0, 0, 0, 0.2);\n}\n\n.checkbox .tree-node {\n  display: inline-block;\n}\n\n.checkbox .checkbox-icon {\n  margin: 0 5px;\n  vertical-align: middle;\n}\n\n.checkbox button {\n  border: none;\n  background: transparent;\n  cursor: pointer;\n}\n\n.checkbox .arrow {\n  margin-left: 5px;\n  vertical-align: middle;\n}\n\n.checkbox .arrow--open {\n  transform: rotate(90deg);\n}\n"}}]);