"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[442],{1869:function(e,n,a){a.r(n),a.d(n,{assets:function(){return E},contentTitle:function(){return N},default:function(){return T},frontMatter:function(){return y},metadata:function(){return A},toc:function(){return D}});var t=a(7462),r=a(3366),l=a(7294),i=a(3905),o=a(2805),s=a(4165),c=a(5861),d=a(9583),u=a(1649),m=a(8193),p=a(148),h=a(4184),f=a.n(h),v=["variant"],g=[{name:"",id:0,children:[1,2,3],parent:null},{name:"Fruits",children:[],id:1,parent:0,isBranch:!0},{name:"Drinks",children:[4,5],id:2,parent:0,isBranch:!0},{name:"Vegetables",children:[],id:3,parent:0,isBranch:!0},{name:"Pine colada",children:[],id:4,parent:2},{name:"Water",children:[],id:5,parent:2}];var x=function(e){var n,a,t=e.isOpen,r=e.className,i="arrow",o=f()(i,((n={})[i+"--closed"]=!t,n),((a={})[i+"--open"]=t,a),r);return l.createElement(u.am,{className:o})},b=function(e){var n=e.variant,a=(0,r.Z)(e,v);switch(n){case"all":return l.createElement(d.xik,a);case"none":return l.createElement(d.u9M,a);case"some":return l.createElement(d.kty,a);default:return null}},k=function(){var e=(0,l.useRef)(null),n=(0,l.useState)(g),a=n[0],r=n[1],i=(0,l.useState)([]),o=i[0],d=i[1],u=function(e){var n=e.element;return new Promise((function(e){n.children.length>0?e():setTimeout((function(){r((function(e){return a=e,t=n.id,r=[{name:"Child Node "+e.length,children:[],id:e.length,parent:n.id,isBranch:!0},{name:"Another child Node",children:[],id:e.length+1,parent:n.id}],a.map((function(e){return e.id===t&&(e.children=r.map((function(e){return e.id}))),e})).concat(r);var a,t,r})),e()}),1e3)}))},h=function(){var n=(0,c.Z)((0,s.Z)().mark((function n(a){var t,r,l;return(0,s.Z)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=0===a.element.children.length,r=o.find((function(e){return e.id===a.element.id})),n.next=4,u(a);case 4:t&&!r&&(l=e.current,d([].concat(o,[a.element])),l&&(l.innerHTML=a.element.name+" loaded"),setTimeout((function(){l&&(l.innerHTML="")}),5e3));case 5:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}();return l.createElement(l.Fragment,null,l.createElement("div",null,l.createElement("div",{className:"visually-hidden",ref:e,role:"alert","aria-live":"polite"}),l.createElement("div",{className:"checkbox"},l.createElement(p.ZP,{data:a,"aria-label":"Checkbox tree",onLoadData:h,multiSelect:!0,propagateSelect:!0,togglableSelect:!0,propagateSelectUpwards:!0,nodeRenderer:function(e){var n=e.element,a=e.isBranch,r=e.isExpanded,i=e.isSelected,o=e.isHalfSelected,s=e.getNodeProps,c=e.level,d=e.handleSelect,u=e.handleExpand;return l.createElement("div",(0,t.Z)({},s({onClick:u}),{style:{marginLeft:40*(c-1)}}),a&&function(e,n){return e&&0===n.children.length?l.createElement(l.Fragment,null,l.createElement("span",{role:"alert","aria-live":"assertive",className:"visually-hidden"},"loading ",n.name),l.createElement(m.xz6,{"aria-hidden":!0,className:"loading-icon"})):l.createElement(x,{isOpen:e})}(r,n),l.createElement(b,{className:"checkbox-icon",onClick:function(e){d(e),e.stopPropagation()},variant:o?"some":i?"all":"none"}),l.createElement("span",{className:"name"},n.name))}}))))},w='import React, { useRef, useState } from "react";\nimport { FaSquare, FaCheckSquare, FaMinusSquare } from "react-icons/fa";\nimport { IoMdArrowDropright } from "react-icons/io";\nimport { AiOutlineLoading } from "react-icons/ai";\nimport TreeView from "react-accessible-treeview";\nimport cx from "classnames";\nimport "./styles.css";\n\nconst initialData = [\n  {\n    name: "",\n    id: 0,\n    children: [1, 2, 3],\n    parent: null,\n  },\n  {\n    name: "Fruits",\n    children: [],\n    id: 1,\n    parent: 0,\n    isBranch: true,\n  },\n  {\n    name: "Drinks",\n    children: [4, 5],\n    id: 2,\n    parent: 0,\n    isBranch: true,\n  },\n  {\n    name: "Vegetables",\n    children: [],\n    id: 3,\n    parent: 0,\n    isBranch: true,\n  },\n  {\n    name: "Pine colada",\n    children: [],\n    id: 4,\n    parent: 2,\n  },\n  {\n    name: "Water",\n    children: [],\n    id: 5,\n    parent: 2,\n  },\n];\n\nfunction MultiSelectCheckboxAsync() {\n  const loadedAlertElement = useRef(null);\n  const [data, setData] = useState(initialData);\n  const [nodesAlreadyLoaded, setNodesAlreadyLoaded] = useState([]);\n\n  const updateTreeData = (list, id, children) => {\n    const data = list.map((node) => {\n      if (node.id === id) {\n        node.children = children.map((el) => {\n          return el.id;\n        });\n      }\n      return node;\n    });\n    return data.concat(children);\n  };\n\n  const onLoadData = ({ element }) => {\n    return new Promise((resolve) => {\n      if (element.children.length > 0) {\n        resolve();\n        return;\n      }\n      setTimeout(() => {\n        setData((value) =>\n          updateTreeData(value, element.id, [\n            {\n              name: `Child Node ${value.length}`,\n              children: [],\n              id: value.length,\n              parent: element.id,\n              isBranch: true,\n            },\n            {\n              name: "Another child Node",\n              children: [],\n              id: value.length + 1,\n              parent: element.id,\n            },\n          ])\n        );\n        resolve();\n      }, 1000);\n    });\n  };\n\n  const wrappedOnLoadData = async (props) => {\n    const nodeHasNoChildData = props.element.children.length === 0;\n    const nodeHasAlreadyBeenLoaded = nodesAlreadyLoaded.find(\n      (e) => e.id === props.element.id\n    );\n\n    await onLoadData(props);\n\n    if (nodeHasNoChildData && !nodeHasAlreadyBeenLoaded) {\n      const el = loadedAlertElement.current;\n      setNodesAlreadyLoaded([...nodesAlreadyLoaded, props.element]);\n      el && (el.innerHTML = `${props.element.name} loaded`);\n\n      // Clearing aria-live region so loaded node alerts no longer appear in DOM\n      setTimeout(() => {\n        el && (el.innerHTML = "");\n      }, 5000);\n    }\n  };\n\n  return (\n    <>\n      <div>\n        <div\n          className="visually-hidden"\n          ref={loadedAlertElement}\n          role="alert"\n          aria-live="polite"\n        ></div>\n        <div className="checkbox">\n          <TreeView\n            data={data}\n            aria-label="Checkbox tree"\n            onLoadData={wrappedOnLoadData}\n            multiSelect\n            propagateSelect\n            togglableSelect\n            propagateSelectUpwards\n            nodeRenderer={({\n              element,\n              isBranch,\n              isExpanded,\n              isSelected,\n              isHalfSelected,\n              getNodeProps,\n              level,\n              handleSelect,\n              handleExpand,\n            }) => {\n              const branchNode = (isExpanded, element) => {\n                return isExpanded && element.children.length === 0 ? (\n                  <>\n                    <span\n                      role="alert"\n                      aria-live="assertive"\n                      className="visually-hidden"\n                    >\n                      loading {element.name}\n                    </span>\n                    <AiOutlineLoading\n                      aria-hidden={true}\n                      className="loading-icon"\n                    />\n                  </>\n                ) : (\n                  <ArrowIcon isOpen={isExpanded} />\n                );\n              };\n              return (\n                <div\n                  {...getNodeProps({ onClick: handleExpand })}\n                  style={{ marginLeft: 40 * (level - 1) }}\n                >\n                  {isBranch && branchNode(isExpanded, element)}\n                  <CheckBoxIcon\n                    className="checkbox-icon"\n                    onClick={(e) => {\n                      handleSelect(e);\n                      e.stopPropagation();\n                    }}\n                    variant={\n                      isHalfSelected ? "some" : isSelected ? "all" : "none"\n                    }\n                  />\n                  <span className="name">{element.name}</span>\n                </div>\n              );\n            }}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst ArrowIcon = ({ isOpen, className }) => {\n  const baseClass = "arrow";\n  const classes = cx(\n    baseClass,\n    { [`${baseClass}--closed`]: !isOpen },\n    { [`${baseClass}--open`]: isOpen },\n    className\n  );\n  return <IoMdArrowDropright className={classes} />;\n};\n\nconst CheckBoxIcon = ({ variant, ...rest }) => {\n  switch (variant) {\n    case "all":\n      return <FaCheckSquare {...rest} />;\n    case "none":\n      return <FaSquare {...rest} />;\n    case "some":\n      return <FaMinusSquare {...rest} />;\n    default:\n      return null;\n  }\n};\n\nexport default MultiSelectCheckboxAsync;\n',S="@keyframes spinner {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.loading-icon {\n  animation: spinner 1.5s linear infinite;\n  margin-left: 5px;\n}\n\n.visually-hidden {\n  position: absolute;\n  clip-path: circle(0);\n  border: 0;\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  width: 1px;\n  white-space: nowrap;\n}\n",C=["components"],y={title:"Asynchronous loading"},N=void 0,A={unversionedId:"examples-MultiSelectCheckboxAsync",id:"examples-MultiSelectCheckboxAsync",title:"Asynchronous loading",description:"This example demonstrates how to create a checkbox tree with asynchronous loading",source:"@site/docs/examples-MultiSelectCheckboxAsync.mdx",sourceDirName:".",slug:"/examples-MultiSelectCheckboxAsync",permalink:"/react-accessible-treeview/docs/examples-MultiSelectCheckboxAsync",draft:!1,tags:[],version:"current",frontMatter:{title:"Asynchronous loading"},sidebar:"docs",previous:{title:"Checkbox with disabled nodes",permalink:"/react-accessible-treeview/docs/examples-MultiSelectCheckboxDisabled"},next:{title:"Checkbox with controlled selectedIds",permalink:"/react-accessible-treeview/docs/examples-MultiSelectCheckboxControlled"}},E={},D=[],M={toc:D},L="wrapper";function T(e){var n=e.components,a=(0,r.Z)(e,C);return(0,i.kt)(L,(0,t.Z)({},M,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This example demonstrates how to create a checkbox tree with asynchronous loading"),(0,i.kt)(o.Z,{component:k,js:w,css:S,mdxType:"CodeTabs"}))}T.isMDXComponent=!0}}]);