"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[207],{7480:function(t,e,n){n.r(e),n.d(e,{assets:function(){return k},contentTitle:function(){return o},default:function(){return s},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return m}});var a=n(7462),l=n(3366),r=(n(7294),n(3905)),d=["components"],i={title:"API Reference"},o=void 0,p={unversionedId:"api",id:"api",title:"API Reference",description:"Prop Types",source:"@site/docs/api.md",sourceDirName:".",slug:"/api",permalink:"/react-accessible-treeview/docs/api",draft:!1,tags:[],version:"current",frontMatter:{title:"API Reference"},sidebar:"docs",next:{title:"Basic",permalink:"/react-accessible-treeview/docs/examples-Basic"}},k={},m=[{value:"Prop Types",id:"prop-types",level:2},{value:"data",id:"data",level:2},{value:"nodeRenderer",id:"noderenderer",level:2},{value:"getNodeProps",id:"getnodeprops",level:2},{value:"onSelect",id:"onselect",level:2},{value:"onNodeSelect",id:"onnodeselect",level:2},{value:"onExpand",id:"onexpand",level:2},{value:"onLoadData",id:"onloaddata",level:2},{value:"Keyboard Navigation",id:"keyboard-navigation",level:2},{value:"Mouse Navigation",id:"mouse-navigation",level:2},{value:"Click actions",id:"click-actions",level:2},{value:"treeState",id:"treestate",level:2}],N={toc:m},u="wrapper";function s(t){var e=t.components,n=(0,l.Z)(t,d);return(0,r.kt)(u,(0,a.Z)({},N,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"prop-types"},"Prop Types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Prop name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default value"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"array[node]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"required")),(0,r.kt)("td",{parentName:"tr",align:null},"Tree data")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"nodeRenderer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"func")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"required")),(0,r.kt)("td",{parentName:"tr",align:null},"Render prop for the node (see below for more details)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"onSelect")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"func")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"noop")),(0,r.kt)("td",{parentName:"tr",align:null},"Function called when a node changes its selected state")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"onNodeSelect")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"func")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"noop")),(0,r.kt)("td",{parentName:"tr",align:null},"Function called when a node was manually selected/deselected")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"onExpand")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"func")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"noop")),(0,r.kt)("td",{parentName:"tr",align:null},"Function called when a node changes its expanded state")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"className")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""')),(0,r.kt)("td",{parentName:"tr",align:null},"className to add to the outermost dom element, al ",(0,r.kt)("inlineCode",{parentName:"td"},"ul")," with ",(0,r.kt)("inlineCode",{parentName:"td"},'role = "tree"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"multiSelect")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"Allows multiple nodes to be selected")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"propagateSelect")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"If set to true, selecting a node will also select its descendants")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"propagateSelectUpwards")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"If set to true, selecting a node will update the state of its parent (e.g. a parent node in a checkbox will be automatically selected if all of its children are selected")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"propagateCollapse")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"If set to true, collapsing a node will also collapse its descendants")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"expandOnKeyboardSelect")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"Selecting a node with a keyboard (using Space or Enter) will also toggle its expanded state")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"togglableSelect")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the selected state is togglable")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"defaultSelectedIds")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"array")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]")),(0,r.kt)("td",{parentName:"tr",align:null},"Array with the ids of the default selected nodes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"defaultExpandedIds")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"array")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]")),(0,r.kt)("td",{parentName:"tr",align:null},"Array with the ids of the default expanded nodes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"defaultDisabledIds")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"array")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]")),(0,r.kt)("td",{parentName:"tr",align:null},"Array with the ids of the default disabled nodes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"selectedIds")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"array")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]")),(0,r.kt)("td",{parentName:"tr",align:null},"(Controlled) Array with the ids that should be selected")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"expandedIds")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"array")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]")),(0,r.kt)("td",{parentName:"tr",align:null},"(Controlled) Array with the ids of branch node that should be")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"clickAction")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"enum")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SELECT")),(0,r.kt)("td",{parentName:"tr",align:null},"Action to perform on click. One of: EXCLUSIVE_SELECT, FOCUS, SELECT")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"onBlur")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"func")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"noop")),(0,r.kt)("td",{parentName:"tr",align:null},"Custom onBlur event that is triggered when focusing out of the component as a whole (moving focus between the nodes won't trigger it).")))),(0,r.kt)("br",null)," ",(0,r.kt)("br",null),(0,r.kt)("h2",{id:"data"},"data"),(0,r.kt)("p",null,"An array of nodes. Nodes are objects with the following structure:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"A nonnegative integer or string that uniquely identifies the node. ",(0,r.kt)("inlineCode",{parentName:"td"},"parent:null")," identifies the root node")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"Used to match on key press")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"children")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"array[id]")),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"An array with the ids of the children nodes.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"parent")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"The parent of the node. ",(0,r.kt)("inlineCode",{parentName:"td"},"null")," for the root node")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"isBranch")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Used to indicated whether a node is branch to be able load async data onExpand, default is false")))),(0,r.kt)("p",null,"The item with ",(0,r.kt)("inlineCode",{parentName:"p"},"parent:null")," of the array represents the root node and won't be displayed."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"static",static:!0},'const data = [\n  { name: "", children: [1, 4, 9, 10, 11], id: 0, parent: null },\n  { name: "src", children: [2, 3], id: 1, parent: 0 },\n  { name: "index.js", id: 2, parent: 1 },\n  { name: "styles.css", id: 3, parent: 1 },\n  { name: "node_modules", children: [5, 7], id: 4, parent: 0 },\n  { name: "react-accessible-treeview", children: [6], id: 5, parent: 4 },\n  { name: "bundle.js", id: 6, parent: 5 },\n  { name: "react", children: [8], id: 7, parent: 4 },\n  { name: "bundle.js", id: 8, parent: 7 },\n  { name: ".npmignore", id: 9, parent: 0 },\n  { name: "package.json", id: 10, parent: 0 },\n  { name: "webpack.config.js", id: 11, parent: 0 },\n];\n')),(0,r.kt)("p",null,"The array can also be generated from a nested object using the ",(0,r.kt)("inlineCode",{parentName:"p"},"flattenTree")," helper (see the examples below)."),(0,r.kt)("p",null,"Data supports non-sequential ids provided by user."),(0,r.kt)("br",null)," ",(0,r.kt)("br",null),(0,r.kt)("h2",{id:"noderenderer"},"nodeRenderer"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Arguments"),": An object containing the following properties:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"element")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:null},"The object that represents the rendered node")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"getNodeProps")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"function")),(0,r.kt)("td",{parentName:"tr",align:null},"A function which gives back the props to pass to the node")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"isBranch")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the rendered node is a branch node")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"isSelected")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the rendered node is selected")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"isHalfSelected")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:null},"If the node is a branch node, whether it is half-selected, else undefined")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"isExpanded")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:null},"If the node is a branch node, whether it is expanded, else undefined")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"isDisabled")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the rendered node is disabled")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"level")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},"A positive integer that corresponds to the aria-level attribute")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"setsize")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},"A positive integer that corresponds to the aria-setsize attribute")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"posinset")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},"A positive integer that corresponds to the aria-posinset attribute")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"handleSelect")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"function")),(0,r.kt)("td",{parentName:"tr",align:null},"Function to assign to the onClick event handler of the element(s) that will toggle the selected state")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"handleExpand")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"function")),(0,r.kt)("td",{parentName:"tr",align:null},"Function to assign to the onClick event handler of the element(s) that will toggle the expanded state")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dispatch")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"function")),(0,r.kt)("td",{parentName:"tr",align:null},"Low level function to dispatch actions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"treeState")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:null},"state of the treeview")))),(0,r.kt)("h2",{id:"getnodeprops"},"getNodeProps"),(0,r.kt)("p",null,"If called without arguments, clicking a leaf node will also call ",(0,r.kt)("inlineCode",{parentName:"p"},"handleSelect")," and clicking a branch node will call ",(0,r.kt)("inlineCode",{parentName:"p"},"handleSelect")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"handleExpand"),".\nIf called with an object with an ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick")," attribute: ",(0,r.kt)("inlineCode",{parentName:"p"},"getNodeProps({onClick:onClickFn})"),", the component will only handle focus onClick. This enables the use of\nthe handleSelect and handleExpand for just a part of the component, as demonstrated in the ",(0,r.kt)("inlineCode",{parentName:"p"},"CheckboxTree")," example."),(0,r.kt)("br",null)," ",(0,r.kt)("br",null),(0,r.kt)("h2",{id:"onselect"},"onSelect"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Arguments"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"onSelect({element, isBranch, isExpanded, isSelected, isHalfSelected, isDisabled, treeState })"),"\nNote: the function uses the state ",(0,r.kt)("em",{parentName:"li"},"after")," the selection.")),(0,r.kt)("h2",{id:"onnodeselect"},"onNodeSelect"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Arguments"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"onNodeSelect({element, isBranch, isSelected, treeState })"),"\nNote: the function uses the state right ",(0,r.kt)("em",{parentName:"li"},"after")," the selection before propagation.")),(0,r.kt)("h2",{id:"onexpand"},"onExpand"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Arguments"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"onExpand({element, isExpanded, isSelected, isHalfSelected, isDisabled, treeState})"),"\nNote: the function uses the state ",(0,r.kt)("em",{parentName:"li"},"after")," the expansion.")),(0,r.kt)("h2",{id:"onloaddata"},"onLoadData"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Arguments"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"onLoadData({element, isExpanded, isSelected, isHalfSelected, isDisabled, treeState})"),"\nNote: the function uses the state ",(0,r.kt)("em",{parentName:"li"},"after")," inital data is loaded and on expansion .",(0,r.kt)("br",null)," ",(0,r.kt)("br",null))),(0,r.kt)("h2",{id:"keyboard-navigation"},"Keyboard Navigation"),(0,r.kt)("p",null,"Follows the same conventions described in ",(0,r.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/wai-aria-practices/examples/treeview/treeview-1/treeview-1b.html"},"https://www.w3.org/TR/wai-aria-practices/examples/treeview/treeview-1/treeview-1b.html")," and ",(0,r.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/wai-aria-practices/#keyboard-interaction-22"},"https://www.w3.org/TR/wai-aria-practices/#keyboard-interaction-22"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Function"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Enter")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"Space")),(0,r.kt)("td",{parentName:"tr",align:null},"Updates the selected node to the current node and triggers ",(0,r.kt)("inlineCode",{parentName:"td"},"onSelect"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Down Arrow")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("ul",null,(0,r.kt)("li",null,"Moves focus to the next node that is tabbable without opening or closing a node.")," ",(0,r.kt)("li",null,"If focus is on the last node, does nothing.")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Up arrow")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("ul",null,(0,r.kt)("li",null," Moves focus to the previous node that is tabbable without opening or closing a node. "),(0,r.kt)("li",null," If focus is on the first node, does nothing.")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Right Arrow")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("ul",null,(0,r.kt)("li",null,"When focus is on a closed node, opens the node; focus does not move.")," ",(0,r.kt)("li",null," When focus is on an end node, does nothing."),(0,r.kt)("li",null," When focus is on a open node, moves focus to the first child node. ")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Left Arrow")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("ul",null," ",(0,r.kt)("li",null,"When focus is on an open node, closes the node.")," ",(0,r.kt)("li",null,"When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.")," ",(0,r.kt)("li",null," When focus is on a root node that is also either an end node or a closed node, does nothing.")," "))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Home")),(0,r.kt)("td",{parentName:"tr",align:null},"Moves focus to first node without opening or closing a node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"End")),(0,r.kt)("td",{parentName:"tr",align:null},"Moves focus to the last node that can be focused without expanding any nodes that are closed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a-z, A-Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("ul",null," ",(0,r.kt)("li",null,"Focus moves to the next node with a name that starts with the typed character.")," ",(0,r.kt)("li",null,"Search wraps to first node if a matching name is not found among the nodes that follow the focused node.")," ",(0,r.kt)("li",null,"Search ignores nodes that are descendants of closed nodes.")," "))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"*")," (asterisk)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("ul",null,(0,r.kt)("li",null," Expands all closed sibling nodes that are at the same level as the focused node."),(0,r.kt)("li",null," Focus does not move.")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Shift + Down Arrow")),(0,r.kt)("td",{parentName:"tr",align:null},"Moves focus to and toggles the selection state of the next node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Shift + Up Arrow")),(0,r.kt)("td",{parentName:"tr",align:null},"Moves focus to and toggles the selection state of the previous node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ctrl + A")),(0,r.kt)("td",{parentName:"tr",align:null},"Selects all nodes in the tree. If all nodes are selected, unselects all nodes.")))),(0,r.kt)("br",null)," ",(0,r.kt)("br",null),(0,r.kt)("h2",{id:"mouse-navigation"},"Mouse Navigation"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Function"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Click")),(0,r.kt)("td",{parentName:"tr",align:null},"Toggles parent nodes and also performs one of ",(0,r.kt)("inlineCode",{parentName:"td"},"clickActions = SELECT, EXCLUSIVE_SELECT, FOCUS"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ctrl+Click")),(0,r.kt)("td",{parentName:"tr",align:null},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"multiselect")," is set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", selects the node without dropping the current selected ones. If false, it selects the clicked node. Doesn't toggle parents.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Shift+Click")),(0,r.kt)("td",{parentName:"tr",align:null},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"multiselect")," is set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", selects from the node without dropping the current selected ones. If false, it focus the clicked node. Doesn't toggle parents.")))),(0,r.kt)("br",null)," ",(0,r.kt)("br",null),(0,r.kt)("h2",{id:"click-actions"},"Click actions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Variant"),(0,r.kt)("th",{parentName:"tr",align:null},"Function"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SELECT")),(0,r.kt)("td",{parentName:"tr",align:null},"Selects the clicked node (default).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"EXCLUSIVE_SELECT")),(0,r.kt)("td",{parentName:"tr",align:null},"Selects the clicked node and deselects the rest.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"FOCUS")),(0,r.kt)("td",{parentName:"tr",align:null},"Focuses the clicked node")))),(0,r.kt)("br",null)," ",(0,r.kt)("br",null),(0,r.kt)("h2",{id:"treestate"},"treeState"),(0,r.kt)("p",null,"The internal state of the component."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"selectedIds"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Set")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"new Set(defaultSelectedIds)")),(0,r.kt)("td",{parentName:"tr",align:null},"Set of the ids of the selected nodes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"controlledIds"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Set")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"new Set(controlledSelectedIds)")),(0,r.kt)("td",{parentName:"tr",align:null},"Set of the ids of the nodes selected programmatically")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tabbableId"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data[0].children[0]")),(0,r.kt)("td",{parentName:"tr",align:null},"Id of the node with tabindex = 0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isFocused"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the tree has focus")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"expandedIds"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Set")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"new Set(defaultExpandedIds)")),(0,r.kt)("td",{parentName:"tr",align:null},"Set of the ids of the expanded nodes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"halfSelectedIds"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Set")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"new Set()")),(0,r.kt)("td",{parentName:"tr",align:null},"Set of the ids of the selected nodes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lastUserSelect"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data[0].children[0]")),(0,r.kt)("td",{parentName:"tr",align:null},"Last selection made directly by the user")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lastInteractedWith"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number or null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Last node interacted with")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lastManuallyToggled"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number or null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Last node that was manually selected/deselected")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disabledIds"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Set")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"new Set(defaultDisabledIds)")),(0,r.kt)("td",{parentName:"tr",align:null},"Set of the ids of the selected nodes")))))}s.isMDXComponent=!0}}]);