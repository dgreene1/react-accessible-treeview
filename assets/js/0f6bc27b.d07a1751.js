"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[99],{4650:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>C,contentTitle:()=>E,default:()=>k,frontMatter:()=>h,metadata:()=>f,toc:()=>v});var t=a(7462),s=a(7294),d=a(3905),o=a(1649),r=a(148),l=a(4184),i=a.n(l);const c=(0,r.fK)({name:"",children:[{name:"Fruits",children:[{name:"Avocados"},{name:"Bananas"},{name:"Berries"},{name:"Oranges"},{name:"Pears"}]},{name:"Drinks",children:[{name:"Apple Juice"},{name:"Chocolate"},{name:"Coffee"},{name:"Tea",children:[{name:"Black Tea"},{name:"Green Tea"},{name:"Red Tea"},{name:"Matcha"}]}]},{name:"Vegetables",children:[{name:"Beets"},{name:"Carrots"},{name:"Celery"},{name:"Lettuce"},{name:"Onions"}]}]});const m=e=>{let{isOpen:n,className:a}=e;const t="arrow",d=i()(t,{[t+"--closed"]:!n},{[t+"--open"]:n},a);return s.createElement(o.am,{className:d})},p=function(){const[e,n]=(0,s.useState)(),a=()=>{n(document.querySelector("#txtIdsToExpand").value.split(",").filter((e=>!!e.trim())).map((e=>isNaN(parseInt(e.trim()))?e:parseInt(e.trim()))))};return s.createElement("div",null,s.createElement("div",null,s.createElement("label",{htmlFor:"txtIdsToExpand"},"Comma-delimited list of branch node IDs to expand:"),s.createElement("input",{id:"txtIdsToExpand",type:"text",onKeyDown:e=>{"Enter"===e.key&&a()}}),s.createElement("button",{onClick:()=>a()},"Set")),s.createElement("div",null,s.createElement("button",{onClick:()=>n([])},"Clear all expanded nodes")),s.createElement("div",{className:"checkbox"},s.createElement(r.ZP,{data:c,"aria-label":"Controlled expanded node tree",expandedIds:e,defaultExpandedIds:[1],nodeRenderer:e=>{let{element:n,isBranch:a,isExpanded:d,isDisabled:o,getNodeProps:r,level:l,handleExpand:i}=e;return s.createElement("div",(0,t.Z)({},r({onClick:i}),{style:{marginLeft:40*(l-1),opacity:o?.5:1}}),a&&s.createElement(m,{isOpen:d}),s.createElement("span",{className:"name"},n.name,"-",n.id))}})))},x='import React, { useState } from "react";\nimport { IoMdArrowDropright } from "react-icons/io";\nimport TreeView, { flattenTree } from "react-accessible-treeview";\nimport cx from "classnames";\n\nconst folder = {\n  name: "",\n  children: [\n    {\n      name: "Fruits",\n      children: [\n        { name: "Avocados" },\n        { name: "Bananas" },\n        { name: "Berries" },\n        { name: "Oranges" },\n        { name: "Pears" },\n      ],\n    },\n    {\n      name: "Drinks",\n      children: [\n        { name: "Apple Juice" },\n        { name: "Chocolate" },\n        { name: "Coffee" },\n        {\n          name: "Tea",\n          children: [\n            { name: "Black Tea" },\n            { name: "Green Tea" },\n            { name: "Red Tea" },\n            { name: "Matcha" },\n          ],\n        },\n      ],\n    },\n    {\n      name: "Vegetables",\n      children: [\n        { name: "Beets" },\n        { name: "Carrots" },\n        { name: "Celery" },\n        { name: "Lettuce" },\n        { name: "Onions" },\n      ],\n    },\n  ],\n};\n\nconst data = flattenTree(folder);\n\nfunction ControlledExpandedNode() {\n  const [expandedIds, setExpandedIds] = useState();\n\n  const onKeyDown = (e) => {\n    if (e.key === "Enter") {\n      getAndSetIds();\n    }\n  };\n\n  const getAndSetIds = () => {\n    setExpandedIds(\n      document\n        .querySelector("#txtIdsToExpand")\n        .value.split(",")\n        .filter(val => !!val.trim())\n        .map((x) => {\n          if (isNaN(parseInt(x.trim()))) {\n            return x;\n          }\n          return parseInt(x.trim());\n        })\n    );\n  };\n\n  return (\n    <div>\n      <div>\n        <label htmlFor="txtIdsToExpand">\n          Comma-delimited list of branch node IDs to expand:\n        </label>\n        <input id="txtIdsToExpand" type="text" onKeyDown={onKeyDown} />\n        <button onClick={() => getAndSetIds()}>Set</button>\n      </div>\n      <div>\n        <button onClick={() => setExpandedIds([])}>\n          Clear all expanded nodes\n        </button>\n      </div>\n      <div className="checkbox">\n        <TreeView\n          data={data}\n          aria-label="Controlled expanded node tree"\n          expandedIds={expandedIds}\n          defaultExpandedIds={[1]}\n          nodeRenderer={({\n            element,\n            isBranch,\n            isExpanded,\n            isDisabled,\n            getNodeProps,\n            level,\n            handleExpand,\n          }) => {\n            return (\n              <div\n                {...getNodeProps({ onClick: handleExpand })}\n                style={{\n                  marginLeft: 40 * (level - 1),\n                  opacity: isDisabled ? 0.5 : 1,\n                }}\n              >\n                {isBranch && <ArrowIcon isOpen={isExpanded} />}\n                <span className="name">\n                  {element.name}-{element.id}\n                </span>\n              </div>\n            );\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst ArrowIcon = ({ isOpen, className }) => {\n  const baseClass = "arrow";\n  const classes = cx(\n    baseClass,\n    { [`${baseClass}--closed`]: !isOpen },\n    { [`${baseClass}--open`]: isOpen },\n    className\n  );\n  return <IoMdArrowDropright className={classes} />;\n};\n\nexport default ControlledExpandedNode;\n';var u=a(3952),b=a(2805);const h={title:"Basic with controlled expandable node"},E=void 0,f={unversionedId:"examples-ControlledExpandedNode",id:"examples-ControlledExpandedNode",title:"Basic with controlled expandable node",description:"This example demonstrates how to create a simple tree with controlled expandable node",source:"@site/docs/examples-ControlledExpandedNode.mdx",sourceDirName:".",slug:"/examples-ControlledExpandedNode",permalink:"/react-accessible-treeview/docs/examples-ControlledExpandedNode",draft:!1,tags:[],version:"current",frontMatter:{title:"Basic with controlled expandable node"},sidebar:"docs",previous:{title:"Basic",permalink:"/react-accessible-treeview/docs/examples-Basic"},next:{title:"Data types",permalink:"/react-accessible-treeview/docs/examples-DataTypes"}},C={},v=[],w={toc:v},I="wrapper";function k(e){let{components:n,...a}=e;return(0,d.kt)(I,(0,t.Z)({},w,a,{components:n,mdxType:"MDXLayout"}),(0,d.kt)("p",null,"This example demonstrates how to create a simple tree with controlled expandable node"),(0,d.kt)(b.Z,{component:p,js:x,css:u.Z,mdxType:"CodeTabs"}))}k.isMDXComponent=!0},3952:(e,n,a)=>{a.d(n,{Z:()=>t});const t=".basic.tree {\n  list-style: none;\n  margin: 0;\n  padding: 20px;\n}\n.basic .tree-node,\n.basic .tree-node-group {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.basic .tree-branch-wrapper,\n.basic .tree-node__leaf {\n  outline: none;\n}\n\n.basic .tree-node--focused {\n  outline-color: rgb(77, 144, 254);\n  outline-style: auto;\n  outline-width: 2px;\n  display: block;\n}\n\n.basic .tree-node__branch {\n  display: block;\n}\n\n.basic .tree-node {\n  cursor: pointer;\n}\n"}}]);