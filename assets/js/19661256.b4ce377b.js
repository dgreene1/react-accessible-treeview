"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[953],{1990:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>w,contentTitle:()=>y,default:()=>I,frontMatter:()=>v,metadata:()=>C,toc:()=>g});var t=a(8168),o=a(8587),s=a(6540),d=a(5680),i=a(33),r=a(2777),c=a(6942),l=a.n(c);const m=(0,r.dG)({name:"",id:"treeview",children:[{id:"fruits",name:"Fruits",children:[{name:"Avocados",id:"avocados"},{name:"Bananas",id:"bananas"},{name:"Berries",id:"berries"},{name:"Oranges",id:"oranges"},{name:"Pears",id:"pears"}]},{id:"drinks",name:"Drinks",children:[{name:"Apple Juice",id:"appleJuice"},{name:"Chocolate",id:"chocolate"},{name:"Coffee",id:"coffee"},{id:"tea",name:"Tea",children:[{name:"Black Tea",id:"blackTea"},{name:"Green Tea",id:"greenTea"},{name:"Red Tea",id:"redTea"},{name:"Matcha",id:"matcha"}]}]},{id:"vegetables",name:"Vegetables",children:[{name:"Beets",id:"beets"},{name:"Carrots",id:"carrots"},{name:"Celery",id:"celery"},{name:"Lettuce",id:"lettuce"},{name:"Onions",id:"onions"}]}]});const u=e=>{let{isOpen:n,className:a}=e;const t="arrow",o=l()(t,{[t+"--closed"]:!n},{[t+"--open"]:n},a);return s.createElement(i.c_e,{className:o})},p=function(){const[e,n]=(0,s.useState)(),a=()=>{const e=document.querySelector("#txtIdToFocus").value.trim();n(e)};return s.createElement("div",null,s.createElement("div",null,s.createElement("label",{htmlFor:"txtIdToFocus"},"Node ID to focus:"),s.createElement("input",{id:"txtIdToFocus",type:"text",onKeyDown:e=>{"Enter"===e.key&&a()}}),s.createElement("button",{onClick:()=>a()},"Set"),s.createElement("div",null,s.createElement("button",{onClick:()=>n(void 0)},"Clear focused node"))),s.createElement("div",{className:"checkbox"},s.createElement(r.Ay,{data:m,"aria-label":"Controlled expanded node tree",defaultExpandedIds:["fruits"],focusedId:e,defaultDisabledIds:["bananas"],nodeRenderer:e=>{let{element:n,isBranch:a,isExpanded:o,isDisabled:d,getNodeProps:i,level:r,handleExpand:c}=e;return s.createElement("div",(0,t.A)({},i({onClick:c}),{style:{marginLeft:40*(r-1),opacity:d?.5:1}}),a&&s.createElement(u,{isOpen:o}),s.createElement("span",{className:"name"},n.name," [",n.id,"]"))}})))},b='import React, { useState } from "react";\nimport { IoMdArrowDropright } from "react-icons/io";\nimport TreeView, { flattenTree } from "react-accessible-treeview";\nimport cx from "classnames";\n\nconst folder = {\n  name: "",\n  id: "treeview",\n  children: [\n    {\n      id: "fruits",\n      name: "Fruits",\n      children: [\n        { name: "Avocados", id: "avocados" },\n        { name: "Bananas", id: "bananas" },\n        { name: "Berries", id: "berries" },\n        { name: "Oranges", id: "oranges" },\n        { name: "Pears", id: "pears" },\n      ],\n    },\n    {\n      id: "drinks",\n      name: "Drinks",\n      children: [\n        { name: "Apple Juice", id: "appleJuice" },\n        { name: "Chocolate", id: "chocolate" },\n        { name: "Coffee", id: "coffee" },\n        {\n          id: "tea",\n          name: "Tea",\n          children: [\n            { name: "Black Tea", id: "blackTea" },\n            { name: "Green Tea", id: "greenTea" },\n            { name: "Red Tea", id: "redTea" },\n            { name: "Matcha", id: "matcha" },\n          ],\n        },\n      ],\n    },\n    {\n      id: "vegetables",\n      name: "Vegetables",\n      children: [\n        { name: "Beets", id: "beets" },\n        { name: "Carrots", id: "carrots" },\n        { name: "Celery", id: "celery" },\n        { name: "Lettuce", id: "lettuce" },\n        { name: "Onions", id: "onions" },\n      ],\n    },\n  ],\n};\n\nconst data = flattenTree(folder);\n\nfunction ControlledFocusedNode() {\n  const [focusId, setFocusId] = useState();\n\n  const onKeyDown = (e) => {\n    if (e.key === "Enter") {\n      getFocusId();\n    }\n  };\n\n  const getFocusId = () => {\n    const id = document.querySelector("#txtIdToFocus").value.trim();\n    setFocusId(id);\n  };\n\n  return (\n    <div>\n      <div>\n        <label htmlFor="txtIdToFocus">Node ID to focus:</label>\n        <input id="txtIdToFocus" type="text" onKeyDown={onKeyDown} />\n        <button onClick={() => getFocusId()}>Set</button>\n        <div>\n          <button onClick={() => setFocusId(undefined)}>\n            Clear focused node\n          </button>\n        </div>\n      </div>\n      <div className="checkbox">\n        <TreeView\n          data={data}\n          aria-label="Controlled expanded node tree"\n          defaultExpandedIds={["fruits"]}\n          focusedId={focusId}\n          defaultDisabledIds={["bananas"]}\n          nodeRenderer={({\n            element,\n            isBranch,\n            isExpanded,\n            isDisabled,\n            getNodeProps,\n            level,\n            handleExpand,\n          }) => {\n            return (\n              <div\n                {...getNodeProps({ onClick: handleExpand })}\n                style={{\n                  marginLeft: 40 * (level - 1),\n                  opacity: isDisabled ? 0.5 : 1,\n                }}\n              >\n                {isBranch && <ArrowIcon isOpen={isExpanded} />}\n                <span className="name">\n                  {element.name} [{element.id}]\n                </span>\n              </div>\n            );\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst ArrowIcon = ({ isOpen, className }) => {\n  const baseClass = "arrow";\n  const classes = cx(\n    baseClass,\n    { [`${baseClass}--closed`]: !isOpen },\n    { [`${baseClass}--open`]: isOpen },\n    className\n  );\n  return <IoMdArrowDropright className={classes} />;\n};\n\nexport default ControlledFocusedNode;\n';var f=a(9914),h=a(6652);const x=["components"],v={title:"Basic with ability to control focus"},y=void 0,C={unversionedId:"examples-ControlledFocusedNode",id:"examples-ControlledFocusedNode",title:"Basic with ability to control focus",description:"This example demonstrates how to create a simple tree with controlled focus node",source:"@site/docs/examples-ControlledFocusedNode.mdx",sourceDirName:".",slug:"/examples-ControlledFocusedNode",permalink:"/react-accessible-treeview/docs/examples-ControlledFocusedNode",draft:!1,tags:[],version:"current",frontMatter:{title:"Basic with ability to control focus"},sidebar:"docs",previous:{title:"Basic with controlled expandable node",permalink:"/react-accessible-treeview/docs/examples-ControlledExpandedNode"},next:{title:"Data types",permalink:"/react-accessible-treeview/docs/examples-DataTypes"}},w={},g=[],T={toc:g},k="wrapper";function I(e){let{components:n}=e,a=(0,o.A)(e,x);return(0,d.yg)(k,(0,t.A)({},T,a,{components:n,mdxType:"MDXLayout"}),(0,d.yg)("p",null,"This example demonstrates how to create a simple tree with controlled focus node"),(0,d.yg)(h.A,{component:p,js:b,css:f.A,mdxType:"CodeTabs"}))}I.isMDXComponent=!0},9914:(e,n,a)=>{a.d(n,{A:()=>t});const t=".basic.tree {\n  list-style: none;\n  margin: 0;\n  padding: 20px;\n}\n.basic .tree-node,\n.basic .tree-node-group {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.basic .tree-branch-wrapper,\n.basic .tree-node__leaf {\n  outline: none;\n}\n\n.basic .tree-node--focused {\n  outline-color: rgb(77, 144, 254);\n  outline-style: auto;\n  outline-width: 2px;\n  display: block;\n}\n\n.basic .tree-node__branch {\n  display: block;\n}\n\n.basic .tree-node {\n  cursor: pointer;\n}\n"}}]);