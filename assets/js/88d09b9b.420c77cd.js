"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[495],{2042:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>E,contentTitle:()=>C,default:()=>A,frontMatter:()=>v,metadata:()=>w,toc:()=>N});var t=a(8168),c=a(8587),r=a(6540),s=a(5680),o=a(6652),l=a(1612),i=a(33),d=a(2777),m=a(6942),p=a.n(m);const h=["variant"],b=(0,d.dG)({name:"",children:[{name:"Fruits",children:[{name:"Avocados"},{name:"Bananas"},{name:"Berries"},{name:"Oranges"},{name:"Pears"}]},{name:"Drinks",children:[{name:"Hot drinks",children:[{name:"Non-alcohol",children:[{name:"Tea",children:[{name:"Black Tea"}]}]}]}]},{name:"Vegetables",children:[{name:"Beets"}]}]});const u=e=>{let{isOpen:n,className:a}=e;const t="arrow",c=p()(t,{[t+"--closed"]:!n},{[t+"--open"]:n},a);return r.createElement(i.c_e,{className:c})},x=e=>{let{variant:n}=e,a=(0,c.A)(e,h);switch(n){case"all":return r.createElement(l.Hcz,a);case"none":return r.createElement(l.$qz,a);case"some":return r.createElement(l.tx_,a);default:return null}},k=function(){return r.createElement("div",null,r.createElement("div",{className:"checkbox"},r.createElement(d.Ay,{data:b,"aria-label":"Single select",multiSelect:!1,propagateSelectUpwards:!0,togglableSelect:!0,nodeAction:"check",nodeRenderer:e=>{let{element:n,isBranch:a,isExpanded:c,isSelected:s,isHalfSelected:o,getNodeProps:l,level:i,handleSelect:d,handleExpand:m}=e;return r.createElement("div",(0,t.A)({},l({onClick:m}),{style:{marginLeft:40*(i-1)}}),a&&r.createElement(u,{isOpen:c}),r.createElement(x,{className:"checkbox-icon",onClick:e=>{d(e),e.stopPropagation()},variant:o?"some":s?"all":"none"}),r.createElement("span",{className:"name"},n.name))}})))},g='import React from "react";\nimport { FaSquare, FaCheckSquare, FaMinusSquare } from "react-icons/fa";\nimport { IoMdArrowDropright } from "react-icons/io";\nimport TreeView, { flattenTree } from "react-accessible-treeview";\nimport cx from "classnames";\nimport "./styles.css";\n\nconst folder = {\n  name: "",\n  children: [\n    {\n      name: "Fruits",\n      children: [\n        { name: "Avocados" },\n        { name: "Bananas" },\n        { name: "Berries" },\n        { name: "Oranges" },\n        { name: "Pears" },\n      ],\n    },\n    {\n      name: "Drinks",\n      children: [\n        {\n          name: "Hot drinks",\n          children: [\n            {\n              name: "Non-alcohol",\n              children: [\n                {\n                  name: "Tea",\n                  children: [\n                    {\n                      name: "Black Tea",\n                    },\n                  ],\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: "Vegetables",\n      children: [{ name: "Beets" }],\n    },\n  ],\n};\n\nconst data = flattenTree(folder);\n\nfunction SingleSelectCheckbox() {\n  return (\n    <div>\n      <div className="checkbox">\n        <TreeView\n          data={data}\n          aria-label="Single select"\n          multiSelect={false}\n          propagateSelectUpwards\n          togglableSelect\n          nodeAction="check"\n          nodeRenderer={({\n            element,\n            isBranch,\n            isExpanded,\n            isSelected,\n            isHalfSelected,\n            getNodeProps,\n            level,\n            handleSelect,\n            handleExpand,\n          }) => {\n            return (\n              <div\n                {...getNodeProps({ onClick: handleExpand })}\n                style={{ marginLeft: 40 * (level - 1) }}\n              >\n                {isBranch && <ArrowIcon isOpen={isExpanded} />}\n                <CheckBoxIcon\n                  className="checkbox-icon"\n                  onClick={(e) => {\n                    handleSelect(e);\n                    e.stopPropagation();\n                  }}\n                  variant={\n                    isHalfSelected ? "some" : isSelected ? "all" : "none"\n                  }\n                />\n                <span className="name">{element.name}</span>\n              </div>\n            );\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst ArrowIcon = ({ isOpen, className }) => {\n  const baseClass = "arrow";\n  const classes = cx(\n    baseClass,\n    { [`${baseClass}--closed`]: !isOpen },\n    { [`${baseClass}--open`]: isOpen },\n    className\n  );\n  return <IoMdArrowDropright className={classes} />;\n};\n\nconst CheckBoxIcon = ({ variant, ...rest }) => {\n  switch (variant) {\n    case "all":\n      return <FaCheckSquare {...rest} />;\n    case "none":\n      return <FaSquare {...rest} />;\n    case "some":\n      return <FaMinusSquare {...rest} />;\n    default:\n      return null;\n  }\n};\n\nexport default SingleSelectCheckbox;\n',S=".checkbox {\n  font-size: 16px;\n  user-select: none;\n  min-height: 320px;\n  padding: 20px;\n  box-sizing: content-box;\n}\n\n.checkbox .tree,\n.checkbox .tree-node,\n.checkbox .tree-node-group {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.checkbox .tree-branch-wrapper,\n.checkbox .tree-node__leaf {\n  outline: none;\n}\n\n.checkbox .tree-node {\n  cursor: pointer;\n}\n\n.checkbox .tree-node .name:hover {\n  background: rgba(0, 0, 0, 0.1);\n}\n\n.checkbox .tree-node--focused .name {\n  background: rgba(0, 0, 0, 0.2);\n}\n\n.checkbox .tree-node {\n  display: inline-block;\n}\n\n.checkbox .checkbox-icon {\n  margin: 0 5px;\n  vertical-align: middle;\n}\n\n.checkbox button {\n  border: none;\n  background: transparent;\n  cursor: pointer;\n}\n\n.checkbox .arrow {\n  margin-left: 5px;\n  vertical-align: middle;\n}\n\n.checkbox .arrow--open {\n  transform: rotate(90deg);\n}\n",f=["components"],v={title:"Checkbox (single selection)"},C=void 0,w={unversionedId:"examples-SingleSelectCheckbox",id:"examples-SingleSelectCheckbox",title:"Checkbox (single selection)",description:"This example demonstrates how to create single select checkbox tree",source:"@site/docs/examples-SingleSelectCheckbox.mdx",sourceDirName:".",slug:"/examples-SingleSelectCheckbox",permalink:"/react-accessible-treeview/docs/examples-SingleSelectCheckbox",draft:!1,tags:[],version:"current",frontMatter:{title:"Checkbox (single selection)"},sidebar:"docs",previous:{title:"Directory tree (multiple selection)",permalink:"/react-accessible-treeview/docs/examples-MultiSelectDirectoryTree"}},E={},N=[],T={toc:N},y="wrapper";function A(e){let{components:n}=e,a=(0,c.A)(e,f);return(0,s.yg)(y,(0,t.A)({},T,a,{components:n,mdxType:"MDXLayout"}),(0,s.yg)("p",null,"This example demonstrates how to create single select checkbox tree"),(0,s.yg)(o.A,{component:k,js:g,css:S,mdxType:"CodeTabs"}))}A.isMDXComponent=!0}}]);