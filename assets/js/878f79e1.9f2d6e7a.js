"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[180],{2577:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>C,contentTitle:()=>T,default:()=>I,frontMatter:()=>k,metadata:()=>v,toc:()=>D});var t=a(8168),r=a(6540),s=a(5680),i=a(6652),o=a(1612),c=a(33),l=a(2777),d=a(6942),m=a.n(d);const p=(0,l.dG)({name:"",id:890,children:[{id:"data-string",name:"Fruits",children:[{name:"Avocados",id:690},{name:"Bananas",id:1001},{name:"Berries",id:793},{name:"Oranges",id:18},{name:"Pears",id:9990}]},{id:"one",name:"Drinks",children:[{name:"Apple Juice",id:7},{name:"Chocolate",id:12},{name:"Coffee",id:1},{id:908,name:"Tea",children:[{name:"Black Tea",id:923},{name:"Green Tea",id:43},{name:"Red Tea",id:23},{name:"Matcha",id:4}]}]},{id:42,name:"Vegetables",children:[{name:"Beets",id:672},{name:"Carrots",id:13},{name:"Celery",id:123},{name:"Lettuce",id:893},{name:"Onions",id:82}]}]}),u=(0,l.dG)({name:"",children:[{name:"Fruits",children:[{name:"Avocados"},{name:"Bananas"},{name:"Berries"},{name:"Oranges"},{name:"Pears"}]},{name:"Drinks",children:[{name:"Apple Juice"},{name:"Chocolate"},{name:"Coffee"},{name:"Tea",children:[{name:"Black Tea"},{name:"Green Tea"},{name:"Red Tea"},{name:"Matcha"}]}]},{name:"Vegetables",children:[{name:"Beets"},{name:"Carrots"},{name:"Celery"},{name:"Lettuce"},{name:"Onions"}]}]});function h(e){let{data:n}=e;return r.createElement(l.Ay,{data:n,"aria-label":"Data type Map tree",multiSelect:!0,propagateSelect:!0,propagateSelectUpwards:!0,togglableSelect:!0,nodeRenderer:e=>{let{element:n,isBranch:a,isExpanded:s,isSelected:i,isHalfSelected:o,getNodeProps:c,level:l,handleSelect:d,handleExpand:m}=e;return r.createElement("div",(0,t.A)({},c({onClick:m}),{style:{marginLeft:40*(l-1)}}),a&&r.createElement(f,{isOpen:s}),r.createElement(b,{className:"checkbox-icon",onClick:e=>{d(e),e.stopPropagation()},variant:o?"some":i?"all":"none"}),r.createElement("span",{className:"name"},n.name,"-",n.id))}})}const f=e=>{let{isOpen:n,className:a}=e;const t="arrow",s=m()(t,{[t+"--closed"]:!n},{[t+"--open"]:n},a);return r.createElement(c.c_e,{className:s})},b=e=>{let{variant:n,...a}=e;switch(n){case"all":return r.createElement(o.Hcz,a);case"none":return r.createElement(o.$qz,a);case"some":return r.createElement(o.tx_,a);default:return null}},y=function(){return r.createElement("div",null,r.createElement("div",{className:"checkbox"},r.createElement("span",null,"You can define IDs for your tree nodes yourself (they have to be of type ",r.createElement("code",null,"number")," or ",r.createElement("code",null,"string"),"). Alternatively, if IDs are not defined, ",r.createElement("code",null,"flattenTree()")," will create sequential, unique node IDs. If you are loading TreeView data asynchronously, it is recommended to define IDs yourself."),r.createElement("h4",null,"IDs defined by consumer (you)"),r.createElement(h,{data:p}),r.createElement("h4",null,"IDs set by ",r.createElement("code",null,"flattenTree()")),r.createElement(h,{data:u})))},g='import React from "react";\nimport { FaSquare, FaCheckSquare, FaMinusSquare } from "react-icons/fa";\nimport { IoMdArrowDropright } from "react-icons/io";\nimport TreeView, { flattenTree } from "react-accessible-treeview";\nimport cx from "classnames";\nimport "./styles.css";\n\nconst dataWithPredefinedIds = flattenTree({\n  name: "",\n  id: 890,\n  children: [\n    {\n      id: "data-string",\n      name: "Fruits",\n      children: [\n        { name: "Avocados", id: 690 },\n        { name: "Bananas", id: 1001 },\n        { name: "Berries", id: 793 },\n        { name: "Oranges", id: 18 },\n        { name: "Pears", id: 9990 },\n      ],\n    },\n    {\n      id: "one",\n      name: "Drinks",\n      children: [\n        { name: "Apple Juice", id: 7 },\n        { name: "Chocolate", id: 12 },\n        { name: "Coffee", id: 1 },\n        {\n          id: 908,\n          name: "Tea",\n          children: [\n            { name: "Black Tea", id: 923 },\n            { name: "Green Tea", id: 43 },\n            { name: "Red Tea", id: 23 },\n            { name: "Matcha", id: 4 },\n          ],\n        },\n      ],\n    },\n    {\n      id: 42,\n      name: "Vegetables",\n      children: [\n        { name: "Beets", id: 672 },\n        { name: "Carrots", id: 13 },\n        { name: "Celery", id: 123 },\n        { name: "Lettuce", id: 893 },\n        { name: "Onions", id: 82 },\n      ],\n    },\n  ],\n});\n\nconst dataWithGeneratedIds = flattenTree({\n  name: "",\n  children: [\n    {\n      name: "Fruits",\n      children: [\n        { name: "Avocados" },\n        { name: "Bananas" },\n        { name: "Berries" },\n        { name: "Oranges" },\n        { name: "Pears" },\n      ],\n    },\n    {\n      name: "Drinks",\n      children: [\n        { name: "Apple Juice" },\n        { name: "Chocolate" },\n        { name: "Coffee" },\n        {\n          name: "Tea",\n          children: [\n            { name: "Black Tea" },\n            { name: "Green Tea" },\n            { name: "Red Tea" },\n            { name: "Matcha" },\n          ],\n        },\n      ],\n    },\n    {\n      name: "Vegetables",\n      children: [\n        { name: "Beets" },\n        { name: "Carrots" },\n        { name: "Celery" },\n        { name: "Lettuce" },\n        { name: "Onions" },\n      ],\n    },\n  ],\n});\n\nfunction DataTypes() {\n  return (\n    <div>\n      <div className="checkbox">\n        <span>\n          You can define IDs for your tree nodes yourself (they have to be of\n          type <code>number</code> or <code>string</code>). Alternatively, if\n          IDs are not defined, <code>flattenTree()</code> will create\n          sequential, unique node IDs. If you are loading TreeView data\n          asynchronously, it is recommended to define IDs yourself.\n        </span>\n        <h4>IDs defined by consumer (you)</h4>\n        <TreeViewComponent data={dataWithPredefinedIds} />\n        <h4>\n          IDs set by <code>flattenTree()</code>\n        </h4>\n        <TreeViewComponent data={dataWithGeneratedIds} />\n      </div>\n    </div>\n  );\n}\n\nfunction TreeViewComponent({ data }) {\n  return (\n    <TreeView\n      data={data}\n      aria-label="Data type Map tree"\n      multiSelect\n      propagateSelect\n      propagateSelectUpwards\n      togglableSelect\n      nodeRenderer={({\n        element,\n        isBranch,\n        isExpanded,\n        isSelected,\n        isHalfSelected,\n        getNodeProps,\n        level,\n        handleSelect,\n        handleExpand,\n      }) => {\n        return (\n          <div\n            {...getNodeProps({ onClick: handleExpand })}\n            style={{ marginLeft: 40 * (level - 1) }}\n          >\n            {isBranch && <ArrowIcon isOpen={isExpanded} />}\n            <CheckBoxIcon\n              className="checkbox-icon"\n              onClick={(e) => {\n                handleSelect(e);\n                e.stopPropagation();\n              }}\n              variant={isHalfSelected ? "some" : isSelected ? "all" : "none"}\n            />\n            <span className="name">\n              {element.name}-{element.id}\n            </span>\n          </div>\n        );\n      }}\n    />\n  );\n}\n\nconst ArrowIcon = ({ isOpen, className }) => {\n  const baseClass = "arrow";\n  const classes = cx(\n    baseClass,\n    { [`${baseClass}--closed`]: !isOpen },\n    { [`${baseClass}--open`]: isOpen },\n    className\n  );\n  return <IoMdArrowDropright className={classes} />;\n};\n\nconst CheckBoxIcon = ({ variant, ...rest }) => {\n  switch (variant) {\n    case "all":\n      return <FaCheckSquare {...rest} />;\n    case "none":\n      return <FaSquare {...rest} />;\n    case "some":\n      return <FaMinusSquare {...rest} />;\n    default:\n      return null;\n  }\n};\n\nexport default DataTypes;\n',x=".checkbox {\n  font-size: 16px;\n  user-select: none;\n  min-height: 320px;\n  padding: 20px;\n  box-sizing: content-box;\n}\n\n.checkbox .tree,\n.checkbox .tree-node,\n.checkbox .tree-node-group {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.checkbox .tree-branch-wrapper,\n.checkbox .tree-node__leaf {\n  outline: none;\n}\n\n.checkbox .tree-node {\n  cursor: pointer;\n}\n\n.checkbox .tree-node .name:hover {\n  background: rgba(0, 0, 0, 0.1);\n}\n\n.checkbox .tree-node--focused .name {\n  background: rgba(0, 0, 0, 0.2);\n}\n\n.checkbox .tree-node {\n  display: inline-block;\n}\n\n.checkbox .checkbox-icon {\n  margin: 0 5px;\n  vertical-align: middle;\n}\n\n.checkbox button {\n  border: none;\n  background: transparent;\n  cursor: pointer;\n}\n\n.checkbox .arrow {\n  margin-left: 5px;\n  vertical-align: middle;\n}\n\n.checkbox .arrow--open {\n  transform: rotate(90deg);\n}\n",k={title:"Data types"},T=void 0,v={unversionedId:"examples-DataTypes",id:"examples-DataTypes",title:"Data types",description:"This example demonstrates different ways of defining ids in data",source:"@site/docs/examples-DataTypes.mdx",sourceDirName:".",slug:"/examples-DataTypes",permalink:"/react-accessible-treeview/docs/examples-DataTypes",draft:!1,tags:[],version:"current",frontMatter:{title:"Data types"},sidebar:"docs",previous:{title:"Basic with controlled expandable node",permalink:"/react-accessible-treeview/docs/examples-ControlledExpandedNode"},next:{title:"Directory tree (single selection)",permalink:"/react-accessible-treeview/docs/examples-DirectoryTree"}},C={},D=[],w={toc:D},E="wrapper";function I(e){let{components:n,...a}=e;return(0,s.yg)(E,(0,t.A)({},w,a,{components:n,mdxType:"MDXLayout"}),(0,s.yg)("p",null,"This example demonstrates different ways of defining ids in data"),(0,s.yg)(i.A,{component:y,js:g,css:x,mdxType:"CodeTabs"}))}I.isMDXComponent=!0}}]);